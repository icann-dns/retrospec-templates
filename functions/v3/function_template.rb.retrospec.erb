# Create a new Puppet DSL function.
#
# **The {newfunction} method provides a public API.**
#
# This method is used both internally inside of Puppet to define parser
# functions.  For example, template() is defined in
# {file:lib/puppet/parser/functions/template.rb template.rb} using the
# {newfunction} method.  Third party Puppet modules such as
# [stdlib](https://forge.puppetlabs.com/puppetlabs/stdlib) use this method to
# extend the behavior and functionality of Puppet.
#
# See also [Docs: Custom
# Functions](http://docs.puppetlabs.com/guides/custom_functions.html)
#
# @example Define a new Puppet DSL Function
#     >> Puppet::Parser::Functions.newfunction(:double, :arity => 1,
#          :doc => "Doubles an object, typically a number or string.",
#          :type => :rvalue) {|i| i[0]*2 }
#     => {:arity=>1, :type=>:rvalue,
#         :name=>"function_double",
#         :doc=>"Doubles an object, typically a number or string."}
#
# @example Invoke the double function from irb as is done in RSpec examples:
#     >> require 'puppet_spec/scope'
#     >> scope = PuppetSpec::Scope.create_test_scope_for_node('example')
#     => Scope()
#     >> scope.function_double([2])
#     => 4
#     >> scope.function_double([4])
#     => 8
#     >> scope.function_double([])
#     ArgumentError: double(): Wrong number of arguments given (0 for 1)
#     >> scope.function_double([4,8])
#     ArgumentError: double(): Wrong number of arguments given (2 for 1)
#     >> scope.function_double(["hello"])
#     => "hellohello"
#
# @param [Symbol] name the name of the function represented as a ruby Symbol.
#   The {newfunction} method will define a Ruby method based on this name on
#   the parser scope instance.
#
# @param [Proc] block the block provided to the {newfunction} method will be
#   executed when the Puppet DSL function is evaluated during catalog
#   compilation.  The arguments to the function will be passed as an array to
#   the first argument of the block.  The return value of the block will be
#   the return value of the Puppet DSL function for `:rvalue` functions.
#
# @option options [:rvalue, :statement] :type (:statement) the type of function.
#   Either `:rvalue` for functions that return a value, or `:statement` for
#   functions that do not return a value.
#
# @option options [String] :doc ('') the documentation for the function.
#   This string will be extracted by documentation generation tools.
#
# @option options [Integer] :arity (-1) the
#   [arity](http://en.wikipedia.org/wiki/Arity) of the function.  When
#   specified as a positive integer the function is expected to receive
#   _exactly_ the specified number of arguments.  When specified as a
#   negative number, the function is expected to receive _at least_ the
#   absolute value of the specified number of arguments incremented by one.
#   For example, a function with an arity of `-4` is expected to receive at
#   minimum 3 arguments.  A function with the default arity of `-1` accepts
#   zero or more arguments.  A function with an arity of 2 must be provided
#   with exactly two arguments, no more and no less.  Added in Puppet 3.1.0.
#
Puppet::Parser::Functions::newfunction(<%= name.to_sym.inspect %>,
                                       :type => <%= return_type.to_sym.inspect %>,
                                       :arity => 1, # minimum one argument, please see arity doc above
                                       :doc => "Write up some Helpful information here"
                                       ) do |args|

  # the arguments are stored in an array
  some_varname1 = args[0]
  some_varname2 = args[1]

  # write some simple validations to ensure your function is executated correctly
  # validate that the input must be >= 2000  # example validation only
  raise(Puppet::ParseError, "<%= name %>(): Bad argument, must be less than 2000 " +
      "given (#{some_varname1.inspect})") if some_varname1.to_s !~ /[2-9]{1}0{3}/

  # insert code here that manipulates the input or calls some external API
  # the last code evaluated will return the value
  value = 3
end
