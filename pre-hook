#!/usr/bin/env ruby
require 'fileutils'
require 'open-uri'

module_path = ARGV[0]

# define the paths
repo_path = File.join(ENV['HOME'],'.retrospec', 'repos')
templates_path = File.dirname(__FILE__)
# ensure the directories are created
FileUtils.mkdir_p(repo_path)

def perform_update?(dest)
  update = true
  path = File.join(dest, '.git', 'objects')
  if File.exists?(path)
    last_updated = File.mtime(path) + 2*60*60  # add two hours
    update = last_updated < Time.now
  end
  update
end

def clone_url(git_url, dest, branch='master')
  if connected?
    if File.exists?(File.join(dest, '.git'))
      `cd #{dest} && git stash && git pull` if perform_update?(dest)
    else
      `git clone -b #{branch} #{git_url} #{dest}`
    end
  end
  dest
end

def connected?
  if ! ENV['CLONE_RETROSPEC_TEMPLATES'].nil?
    # if the user wants internet but doesn't want cloning, allow them to set this variable
    return false
  end
  open("http://www.google.com/") rescue false
end

# lets all make sure we have the pre-commit hook repository, templates and link established
hook_repo_path = clone_url('https://github.com/drwahl/puppet-git-hooks.git', File.join(repo_path, 'puppet-git-hooks'))

# this will create a symlink to the pre-commit hook in the repo we just downloaded inside the templates folder
source_symlink_path = File.join(hook_repo_path, 'pre-commit')
dest_symlink_path = File.join(templates_path,'module_files', '.git', 'hooks', 'pre-commit')
begin
  unless File.exists?(dest_symlink_path)
    FileUtils.mkdir_p(File.join(templates_path,'module_files', '.git', 'hooks'))
    FileUtils.ln_s(source_symlink_path, dest_symlink_path)
  end
rescue Errno::EEXIST => e
  puts e.message
  # skipping creation of symlink since it already exists
end

exit 0
