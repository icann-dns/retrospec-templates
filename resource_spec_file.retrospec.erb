# frozen_string_literal: true

require 'spec_helper'
require 'shared_contexts'

describe '<%= @type.name -%>' do
  # by default the hiera integration uses hiera data from the shared_contexts.rb file
  # but basically to mock hiera you first need to add a key/value pair
  # to the specific context in the spec/shared_contexts.rb file
  # Note: you can only use a single hiera context per describe/context block
  # rspec-puppet does not allow you to swap out hiera data on a per test block
  # include_context :hiera

  <%- if @type.type == :definition -%>
  let(:title) { 'XXreplace_meXX' }
  <%- elsif @type.type == :node -%>
  # the node name you want to test for in the site.pp classification
  let(:node) { '<%= @type.name %>' }
  <%- end -%>
  # below is a list of the resource parameters that you can override.
  # By default all non-required parameters are commented out,
  # while all required parameters will require you to add a value
  let(:params) do
    {
    <%- @parameters.each do |k,v| -%>
        <%- if v.nil? -%>
      <%= "#{k}: '#{k}_value'," %>
        <%- else -%>
      <%= "##{k}: #{variable_value(v)}," %>
        <%- end -%>
    <%- end -%>
    }
  end
  # below is the facts hash that gives you the ability to mock
  # facts on a per describe/context block.  If you use a fact in your
  # manifest you should mock the facts below.
  on_supported_os.each do |os, facts|
    context "on #{os}" do
      let(:facts) do
        facts
      end
      describe 'check default config' do
        # add these two lines in a single test block to enable puppet and hiera debug mode
        # Puppet::Util::Log.level = :debug
        # Puppet::Util::Log.newdestination(:console)
        it do
          is_expected.to compile.with_all_deps
        end

        <%- @resources.each do |res| -%>
        it do
          is_expected.to contain_<%= res.type.gsub('::', '__')%>('<%= res.title %>').with(
          <%= res.parameters.ai({:indent => -14, :plain => true, :sort_keys => true}).gsub(/^\{/,'').gsub(/\}$/, '').tr('"', "'")%>
            )
        end
        <%- end -%>
      end

      describe 'Change Defaults' do
       <%- @parameters.each do |k,v| -%>
        context '<%= k %>' do
          before { params.merge!( <%= k %>: 'XXXchangemeXXX' ) }
          it { is_expected.to compile }
          # Add Check to validate change was successful
        end
       <%- end -%>
      end

      # You will have to correct any values that should be bool
      describe 'check bad type' do
       <%- @parameters.each do |k,v| -%>
        context '<%= k %>' do
          before { params.merge!( <%= k %>: true ) }
          it { expect { subject.call }.to raise_error(Puppet::Error) }
        end
       <%- end -%>
      end
    end
  end
end
