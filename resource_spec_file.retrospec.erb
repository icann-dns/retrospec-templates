# frozen_string_literal: true

require 'spec_helper'

describe '<%= @type.name -%>' do
  <%- if @type.type == :definition -%>
  let(:title) { 'foobar' }
  <%- elsif @type.type == :node -%>
  let(:node) { '<%= @type.name %>' }
  <%- end -%>
  let(:params) do
    {
    <%- @parameters.each do |k,v| -%>
        <%- if v.nil? -%>
      <%= "#{k}: '#{k}_value'," %>
        <%- else -%>
      <%= "##{k}: #{variable_value(v)}," %>
        <%- end -%>
    <%- end -%>
    }
  end

  on_supported_os.each do |os, facts|
    context "on #{os}" do
      let(:facts) { facts }

      describe 'check default config' do
        # Puppet::Util::Log.level = :debug
        # Puppet::Util::Log.newdestination(:console)
        it { is_expected.to compile.with_all_deps }

        <%- @resources.each do |res| -%>
        it do
          is_expected.to contain_<%= res.type.gsub('::', '__')%>('<%= res.title %>').with(
          <%= res.parameters.ai({:indent => -14, :plain => true, :sort_keys => true}).gsub(/^\{/,'').gsub(/\}$/, '').tr('"', "'")%>
            )
        end
        <%- end -%>
      end

      describe 'Change Defaults' do
       <%- @parameters.each do |k,v| -%>
        context '<%= k %>' do
          before { params.merge!( <%= k %>: 'XXXchangemeXXX' ) }
          it { is_expected.to compile }
        end
       <%- end -%>
      end

      # You will have to correct any values that should be bool
      describe 'check bad type' do
       <%- @parameters.each do |k,v| -%>
        context '<%= k %>' do
          before { params.merge!( <%= k %>: true ) }
          it { expect { subject.call }.to raise_error(Puppet::Error) }
        end
       <%- end -%>
      end
    end
  end
end
